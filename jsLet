<!DOCTYPE html>
<html>
<head>
    <title>JavaScript Let</title>
</head>
<body>
<h1>JavaScript Let</h1>
<p>The let keyword was introduced in ES6 (2015). Let variables must be declared before use and cannot be redeclared in the same scope.</p>

<h2>Block Scope and Let</h2>
<p>ES6 introduced block scope to JavaScript with the let and const keywords. A variable declared within a block using let is not accessible from outside the block.</p>
<pre><code>
{
    let x = 2; 
}
// x is NOT accessible here
</code></pre>

<h2>Global Scope</h2>
<p>When declaring variables with the var keyword, they carry a global scope. Var variables can be accessed from outside the block where they're declared.</p>
<pre><code>
{
    var x = 2; 
}
// x CAN be used here
</code></pre>

<h2>Rules for Redeclaring Variables</h2>
<p>Let variables cannot be redeclared. However, var can be redeclared which could cause potential issues.</p>
<p>Redeclaring a var variable inside a block also redeclares it outside the block:</p>
<pre><code>
var x = 10;
{
    var x = 2;
}
// x is now also 2 outside the block
</code></pre>
<p>This problem can be solved by declaring the variable with the let keyword which confines it to the block scope:</p>
<pre><code>
let x = 10;
{
    let x = 2;
}
// x is still 10 outside the block
</code></pre>

<h2>The Difference Between var, let and const</h2>
<p><strong>Advantages of let and const:</strong><br>
- block scope.<br>
- cannot be redeclared.<br>
- need to be declared before use.<br>
- do not bind to this.<br>
- are not hoisted.</p>
<p><strong>Downsides of var:</strong><br>
- hoisted.<br>
- binds to this.<br>
- does not need to be declared prior to use.</p>

<h2>Browser Support for let and const</h2>
<p>The let and const keywords are unsupported in Internet Explorer 11 or earlier.</p>

<h2>Rules for Redeclaring</h2>
<p>Redeclaring a var variable anywhere in a program is allowed. However, with let, redeclaring a variable in the same block is NOT permitted:</p>
<pre><code>
var x = 2; // Allowed
let x = 3; // Not allowed
</code></pre>
<p>Redeclaring a let variable in a different block, however, is allowed:</p>
<pre><code>
let x = 2; // Allowed
{
    let x = 3; // Allowed
}
</code></pre>

<h2>Let Hoisting</h2>
<p>While var variables are hoisted to the top and can be initialized at any time, let variables are hoisted to the top but not initialized. Thus, using a let variable before it is declared results in a ReferenceError:</p>
<pre><code>
carName = "Saab"; // Not OK
let carName = "Volvo";
</code></pre>
</body>
</html>